/*
During the dance contest, each judge evaluates the dancers' performances based on three criteria, using a score from 1 to 10 
for each of the criteria. You are given a table of the scores awarded to a specific dancer by each judge. Recently, the
dance contest made the decision to drop scores awarded by a certain judge if that judge gave an extreme (either minimum or
maximum) score for at least two criteria.

For example, if the judge awarded one of the minimum scores for musicality (i.e., there may be similar scores for
musicality, but there may not be smaller scores for that criterion) and one of the maximum scores for floorcraft, all three
of the scores given by that judge should not be taken into account.

Return a table that consists of only the scores that should be considered after this filtering, sorted by arbiter_id.

The scores table contain the following columns:

    arbiter_id - the unique ID of the judge;
    first_criterion - the score given for the first criterion;
    second_criterion - the score given for the second criterion;
    third_criterion - the score given for the third criterion.


*/
CREATE PROCEDURE dancingCompetition()
BEGIN

select scores.*
from scores left JOIN
(
    select arbiter_id, count(*) as times
from (
    SELECT arbiter_id
    from scores
    where first_criterion in (select min(first_criterion) as c from scores union all select max(first_criterion) as c from 
                              scores)
UNION ALL
    select arbiter_id
    from scores
    where second_criterion in (select min(second_criterion) as c from scores union all select max(second_criterion) as c from 
                               scores)
UNION ALL
    select arbiter_id
    from scores
    WHERE third_criterion in (select min(third_criterion) as c from scores union all select max(third_criterion) as c from 
                              scores)
) a1
group by arbiter_id ) b1 on (scores.arbiter_id = b1.arbiter_id)
where b1.times < 2 or b1.times IS NULL;

END
