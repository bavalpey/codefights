/*
You are playing a game on a rectangular checkerboard with a specific set of rules.
Each game piece has a unique id and each cell on the board is defined by its x and y coordinates.

The current positions of your pieces on the board are stored in the positions table with the following structure:
  id: unique piece id;
  x: x coordinate of the cell that the piece with id id occupies;
  y: y coordinate of the cell that the piece with id id occupies.

In this game each piece on the board is said to defend its nearest neighbor. The distance between two pieces is calculated simply as the
distance between the points (x1, y1) and (x2, y2), where (x1, y1) and (x2, y2) are the coordinates of the cells occupied by the first
and the second piece, respectively.
You thought it might be good idea to find what piece each of the game pieces defends.

Given the positions table, compose the resulting table with two columns: id1 and id2, such that on each row the piece with id id1
defends the piece with id2 (i.e. id2 is the closest to id1 piece).
The table should be sorted by the values of id1 in ascending order.
It's guaranteed that for each piece there is only one other piece closest to it.
*/

CREATE PROCEDURE closestCells()
BEGIN
select d1.id1, d1.id2
from (
  select p1.id as id1, p2.id as id2, sqrt(pow(p1.x*1.0-p2.x*1.0,2)+pow(p1.y*1.0-p2.y*1.0,2)) as distance
  from positions as p1 join positions as p2 on(p1.id <> p2.id)) as d1
INNER JOIN (
  select id1, id2, min(distance) as distance
  from (
    select p1.id as id1, p2.id as id2, sqrt(pow(p1.x*1.0-p2.x*1.0,2)+pow(p1.y*1.0-p2.y*1.0,2)) as distance
    from positions as p1 join positions as p2 on(p1.id <> p2.id)) as d3
    group by id1) as d2
on d1.id1 = d2.id1 and d1.distance = d2.distance
order by id1;
END
